<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Fresh and Blood]]></title>
  <link href="http://ozryo.github.io/atom.xml" rel="self"/>
  <link href="http://ozryo.github.io/"/>
  <updated>2014-11-03T16:47:57+09:00</updated>
  <id>http://ozryo.github.io/</id>
  <author>
    <name><![CDATA[r-ehara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正規化]]></title>
    <link href="http://ozryo.github.io/blog/2014/11/03/title1025/"/>
    <updated>2014-11-03T18:20:29+09:00</updated>
    <id>http://ozryo.github.io/blog/2014/11/03/title1025</id>
    <content type="html"><![CDATA[<p>正規化のまとめ</p>

<!--more-->


<p>第１正規形：重複をなくす。イメージだと、エクセルの１つのセルのなかにむりやり２つのデータを入れているデータを排除。➡横持ちにしたり縦持ちにしたりする。</p>

<hr />

<p>A01|Tanaka|Kaori|Atom|</p>

<p>A01|Tanaka|Kaori
A01|Tanaka|Atom</p>

<p>第２正規形：まず、関数従属性についての整理。
[A] ➡　[B] ➡　AならばBである。
完全関数従属のみのテーブルにすることが第２正規化となる。</p>

<p>&mdash;
001|NTT|A01|Tanaka|</p>

<p>上記は会社コードと社員コードがKeyである。
社員名は、会社コードと社員コードによって決まる。つまり完全関数従属がある。</p>

<h2>会社名は、会社コードによって決まる。つまり、完全関数従属がない。（部分関数従属）</h2>

<p>001|A01|Tanaka</p>

<p>001|NTT</p>

<p>第２正規化のメリットは以下
上記例でいうと会社と社員の情報を分けることが出来たので、社員情報がない場合でも会社を登録することができる。
また、会社コードと社員コードでＫｅｙになっていたので、同じ会社コードで違う会社名を登録することを防げる。
テーブル分割のメリットは更新異常を防げる。</p>

<p>第３正規化について</p>

<h2>推移的関数従属をなくす。</h2>

<p>001|A01|Tanaka|AAA|Kaihatu</p>

<p>{001,A01} ➡ {AAA}　➡ [Kaihatu]</p>

<p>会社コードと社員コードにより部署コードがきまる。部署コードから部署名がきまる。
これが推移的関数従属である。
例えば、新設のまだ社員が存在しない部署を登録することができない。
以下、正規化後</p>

<p>&mdash;
001|A01|Tanaka|AAA
AAA|Kaihatu</p>

<h2>ボイスーコッド正規化について</h2>

<p>社員ID,チームコード,チーム補佐</p>

<p>000A|001|123w　
000B|001|456Z　
000B|002|0030　
001F|001|123w　
001F|002|0030　</p>

<p>key:社員ID,チームコード</p>

<p>上記のテーブルには部分関数従属も推移的関数従属も存在しない。つまり、第３正規化されたテーブルといえる。
だがしかし、ボイスーコッド正規化ではない。
なざなら上記テーブルは、{チーム補佐} ➡ [チームコード] が成り立ちそうだから。
非キーからキー項目への関数従属をなくした状態がボイス-コッド正規化なのである。</p>

<p>ボイスーコッド正規化でないと起こりえる問題とは？
上記例だと、チーム補佐がチームコードを変える場合、複数レコードを更新しないといけない。
チームに人が所属しない限り、レコードを登録できない。</p>

<h2>今までの正規化の手順に習うと、チーム補佐をkeyにしたテーブルを切り出すように思える。</h2>

<p>00A|001　
00B|001　
00B|002　</p>

<p>123w|001　
456Z|001　
0030|002　</p>

<p>これだと、元のテーブルにもどせない。非可逆である。
正規化は基本１対多にすることをいう。上記は多対多</p>

<p>000A|123w
000B|456Z
000B|0030
001F|123w
001F|0030</p>

<p>123w|001
456Z|001
0030|002</p>

<p>これにすれば、１対多が成立するのでよいはず。
ただし、上記でも問題が発生する。
例えば、000A|0030を登録することが可能。
そうすると、000Aは001と002の両方のチームの補佐を受けることになる。
社員とチームの関係を正規化によってくずしたために発生する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML_クラス図]]></title>
    <link href="http://ozryo.github.io/blog/2014/04/06/title/"/>
    <updated>2014-04-06T20:37:04+09:00</updated>
    <id>http://ozryo.github.io/blog/2014/04/06/title</id>
    <content type="html"><![CDATA[<p>UMLの勉強その１</p>

<!--more-->


<p>UMLとはシステムをモデル化するための言語</p>

<p>UMLにはクラス図、シーケンス図、ユースケース図、などなど</p>

<p>まず、クラス図</p>

<p>・関連・・・修飾されることによって具体的な意味になる</p>

<p>・依存・・・一時的な結びつき。例えば会社クラスと部門クラスと社員クラスがあった場合、会社クラスと社員クラスは依存関係。つまり、必要な場合に会社クラスのcreateメソッドなどで社員クラスを生成する。
また、ローカル変数で使用したり、メソッドの引数、戻り値などで使われる場合。</p>

<p>・汎化・・・継承関係</p>

<p>・洗練・・・インターフェイスの実装（implements）</p>

<p><img src="http://ozryo.github.io/images/rel-exp.gif" alt="rel-exp" /></p>

<p>関連の種類</p>

<p><img src="http://ozryo.github.io/images/assoc-exp.gif" alt="assoc-exp" /></p>

<p>集約に関しては、菱形側がもう片側を所有している。菱形が黒く塗りつぶされている場合は、強い関連を示し、コンポジションと呼ばれる。菱形側が消滅したら片方も消滅してしまう場合である。つまり、見出しと明細の関係だ。</p>

<p>矢印がついた関連の場合、矢印の方向にのみ辿れる（参照している）。例えば、あるサービスやＢＯクラスからＤＡＯを使用している場合など。</p>

<p>集約と依存の違いがわかりずらいが、依存は一時的な結びつきというところが重要</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのめも]]></title>
    <link href="http://ozryo.github.io/blog/2014/04/01/it-should-become-a-flesh-and-blood/"/>
    <updated>2014-04-01T16:29:20+09:00</updated>
    <id>http://ozryo.github.io/blog/2014/04/01/it-should-become-a-flesh-and-blood</id>
    <content type="html"><![CDATA[<p>技術の勉強で習得したことをアウトプットしたい人にとって、
ブログを活用するのはいいことと思えた。</p>

<!--more-->


<p>せっかくブログを始めるならばということで、GitPagesを利用しよう
GitPagesの利点
・GitHubに登録すれば始めれるので無料
・Git、Ruby、Octopress、Jekyllなどの技術に触れられる</p>

<p>まず、GitHubに登録を済まして、メールの認証をしておく。</p>

<p>てかGitPagesってなんなんだよ</p>

<p>　ウェブサイトをGitで管理して、GitHubへプッシュすることで公開される</p>

<p>　GitPagesにはユーザーサイトまたはオーガナイゼーションサイト、プロジェクトサイトがある。
　ユーザーサイトとオーガナイゼーションサイトはユーザー、オーガナイザに対して作ることができるGithubPagesであり、プロジェクトサイトはリポジトリに対して作成できる。
　プロジェクトサイトは、あるリポジトリにgh-pagesブランチを作成してそこに必要なファイルをPushすることにより公開できる。それ以外はmasterブランチが対象である。</p>

<p>　今回は、ユーザーサイトを作成するのでusername.github.ioリポジトリを作成して、静的ファイルをそこにPUSHすればOK</p>

<p>次にOctopressだ</p>

<p>自らhtmlファイルを作成して、pushしてなんて面倒くさすぎて論外。
そこでOctopressの出番である。</p>

<p>てかOctopressってなんなんだよ　簡単にいえば、Jekyllを使用してGithubPagesを作成するフレームワークなわけだから、Jekyllを理解する必要がある</p>

<p>で、Jekyllってなんなんだよ
　静的なブログを構築するためのRubyプログラム。ページや記事の原稿をファイルで管理してテンプレートエンジンであるLiquidを用いて原稿をテンプレートに埋め込んでいく
　フレームワークではなく、ファイルジェネレータ。Markdownやhtmlで書かれた原稿からブログに必要なhtml一式を出力する</p>

<p>　Jekyll は、予め想定された役割を持つファイル、ディレクトリで構成されている</p>

<h2>・_config.yml</h2>

<p>YAML で記述したサイト構築用設定ファイルです。ここで設定した key: value は、グローバルな変数 site.key で参照できます。</p>

<h2>・_layouts/</h2>

<p>ファイルに適用するテンプレートを置く場所です。テンプレートからは、Liquid タグ  で、適用元のコンテンツが参照できます。</p>

<h2>・_includes/</h2>

<p>汎用的もしくは部分的テンプレートを置く場所です。例えば <em>includes/file.ext は、Liquid タグ Included file &lsquo;file.ext&rsquo; not found in </em>includes directory で呼び出せます。</p>

<h2>・_posts/</h2>

<p>ブログの原稿を置く場所です。予め、ファイル名の付け方とディレクトリの構造を _config.yml で permalink として定めておく必要があります。</p>

<h2>・_site/</h2>

<p>最終的なサイトが出力される場所です。ここの内容をサーバーに転送するとサイトが出来上がります。</p>

<h2>・その他の特別なディレクトリ</h2>

<p>特別な役割を持たせるディレクトリは、通例、先頭に _ を付け <em>config.yml に設定します。例えば Liquid 用のタグやフィルタの Ruby プログラムを置いておく </em>plugins があります。</p>

<h2>・その他のテキストファイル</h2>

<p>上記以外に置かれたテキストファイルは、ファイル先頭のYAMLディレクティブで指定されたテンプレートに従ってレンダリングされ、テンプレートと同じファイル形式で_siteへ出力されます。YAMLのないファイルは、そのままスルーで出力されます。</p>

<p>ようやくOctopress
つまり、Jekyllを使用したフレームワークであると
作業環境にはRuby1.9.2以上が必要
とりあえず、インストールと初期設定に関しては、以下を参考にした。</p>

<p><a href="http://qiita.com/syui/items/07365ed24eef63602233">http://qiita.com/syui/items/07365ed24eef63602233</a></p>

<p>では、実際に記事を投稿する手順は、</p>

<p>　・新規記事の作成
　　
　　rake new_post[&lsquo;title&rsquo;]
　　
　　この時点では、日本語をタイトルにできない。このコマンドによって作成されるsource/_posts/xxxxx.markdownをエディタで編集することにより、記事の内容、タイトルの変更ができる</p>

<p>　・記事の投稿（デプロイ）masterブランチにpushしている</p>

<p>　　rake gen_deploy
　　sourceブランチにもpushする
　　git add .
　　git commit -m &lsquo;message&rsquo;
　　git push origin source
　　</p>

<p>　・記事のプレビュー（デプロイすると即公開なので）</p>

<p>　　rake generate
　　rake preview
　　<a href="http://localhost:4000%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9">http://localhost:4000%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9</a></p>
]]></content>
  </entry>
  
</feed>
