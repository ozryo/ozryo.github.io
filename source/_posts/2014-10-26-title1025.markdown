---
layout: post
title: "正規化"
date: 2014-10-26 18:20:29 +0900
comments: true
categories: 
---
正規化のまとめ
<!--more-->
第１正規形：重複をなくす。イメージだと、エクセルの１つのセルのなかにむりやり２つのデータを入れているデータを排除。➡横持ちにしたり縦持ちにしたりする。
___
A01|Tanaka|Kaori|Atom|

A01|Tanaka|Kaori
A01|Tanaka|Atom



第２正規形：まず、関数従属性についての整理。
[A] ➡　[B] ➡　AならばBである。
完全関数従属のみのテーブルにすることが第２正規化となる。

--
001|NTT|A01|Tanaka|

上記は会社コードと社員コードがKeyである。
社員名は、会社コードと社員コードによって決まる。つまり完全関数従属がある。
会社名は、会社コードによって決まる。つまり、完全関数従属がない。（部分関数従属）
--
001|A01|Tanaka

001|NTT

第２正規化のメリットは以下
上記例でいうと会社と社員の情報を分けることが出来たので、社員情報がない場合でも会社を登録することができる。
また、会社コードと社員コードでＫｅｙになっていたので、同じ会社コードで違う会社名を登録することを防げる。
テーブル分割のメリットは更新異常を防げる。

第３正規化について
推移的関数従属をなくす。
--
001|A01|Tanaka|AAA|Kaihatu

{001,A01} ➡ {AAA}　➡ [Kaihatu]

会社コードと社員コードにより部署コードがきまる。部署コードから部署名がきまる。
これが推移的関数従属である。
例えば、新設のまだ社員が存在しない部署を登録することができない。
以下、正規化後

--
001|A01|Tanaka|AAA
AAA|Kaihatu


ボイスーコッド正規化について
--
社員ID,チームコード,チーム補佐

000A|001|123w
000B|001|456Z
000B|002|0030
001F|001|123w
001F|002|0030


key:社員ID,チームコード

上記のテーブルには部分関数従属も推移的関数従属も存在しない。つまり、第３正規化されたテーブルといえる。
だがしかし、ボイスーコッド正規化ではない。
なざなら上記テーブルは、{チーム補佐} ➡ [チームコード] が成り立ちそうだから。
非キーからキー項目への関数従属をなくした状態がボイス-コッド正規化なのである。

ボイスーコッド正規化でないと起こりえる問題とは？
上記例だと、チーム補佐がチームコードを変える場合、複数レコードを更新しないといけない。
チームに人が所属しない限り、レコードを登録できない。

今までの正規化の手順に習うと、チーム補佐をkeyにしたテーブルを切り出すように思える。
--
00A|001
00B|001
00B|002


123w|001
456Z|001
0030|002

これだと、元のテーブルにもどせない。非可逆である。
正規化は基本１対多にすることをいう。上記は多対多

000A|123w
000B|456Z
000B|0030
001F|123w
001F|0030


123w|001
456Z|001
0030|002

これにすれば、１対多が成立するのでよいはず。
ただし、上記でも問題が発生する。
例えば、000A|0030を登録することが可能。
そうすると、000Aは001と002の両方のチームの補佐を受けることになる。
社員とチームの関係を正規化によってくずしたために発生する。
